#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Matt Wright <matt@nobien.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = '''
---
module: supervisorctl
short_description: Manage the state of a program or group of programs running via Supervisord
description:
     - Manage the state of a program or group of programs running via I(Supervisord)
version_added: "0.7"
options:
  name:
    description:
      - The name of the I(supervisord) program/process to manage
    required: true
    default: null
  state:
    description:
      - The state of service
    required: true
    default: null
    choices: [ "started", "stopped", "restarted" ]
examples:
   - code: "supervisorctl: name=my_app state=started"
     description: Manage the state of program I(my_app) to be in I(started) state.
requirements: [ ]
author: Matt Wright
'''

def _is_present(name, supervisorctl):
    rc, out, err = _run('%s status' % supervisorctl)
    return name in out


def _is_running(name, supervisorctl):
    rc, out, err = _run('%s status %s' % (supervisorctl, name))
    return 'RUNNING' in out


def _run(cmd):
    # returns (rc, stdout, stderr) from shell command
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE, shell=True)
    stdout, stderr = process.communicate()
    return (process.returncode, stdout, stderr)


def main():
    arg_spec = dict(
        name=dict(required=True),
        state=dict(required=True, choices=['present', 'started', 'restarted', 'stopped'])
    )

    module = AnsibleModule(argument_spec=arg_spec)

    name = module.params['name']
    state = module.params['state']

    SUPERVISORCTL = module.get_bin_path('supervisorctl', True)

    present = _is_present(name, SUPERVISORCTL)

    if state == 'present':
        if not present:
            _run('%s reread' % SUPERVISORCTL)
            rc, out, err = _run('%s add %s' % (SUPERVISORCTL, name))

            if '%s: added process group' % name in out:
                module.exit_json(changed=True, name=name, state=state)
            else:
                module.fail_json(msg=out, name=name, state=state)

        module.exit_json(changed=False, name=name, state=state)

    running = _is_running(name, SUPERVISORCTL)

    if running and state == 'started':
        module.exit_json(changed=False, name=name, state=state)

    if running and state == 'stopped':
        rc, out, err = _run('%s stop %s' % (SUPERVISORCTL, name))

        if '%s: stopped' % name in out:
            module.exit_json(changed=True, name=name, state=state)

        module.fail_json(msg=out)

    elif running and state == 'restarted':
        rc, out, err = _run('%s update %s' % (SUPERVISORCTL, name))
        rc, out, err = _run('%s restart %s' % (SUPERVISORCTL, name))

        if '%s: stopped' % name in out and '%s: started' % name in out:
            module.exit_json(changed=True, name=name, state=state)

        module.fail_json(msg=out)

    elif not running and state == 'started':
        rc, out, err = _run('%s start %s' % (SUPERVISORCTL, name))

        if '%s: started' % name in out:
            module.exit_json(changed=True, name=name, state=state)

        module.fail_json(msg=out)

    elif not running and state == 'restarted':
        module.fail_json(msg='Could not restart `%s` because it is not running' % name)

    module.exit_json(changed=False, name=name, state=state)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
